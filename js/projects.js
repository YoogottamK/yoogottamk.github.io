const e=[{id:"/projects/under-construction",tags:[],title:"Under Construction",content:"I have worked on a lot of other projects, I need some time to put them up here.Thank you for your patience!"},{id:"/projects/c-shell",tags:["shell","c"],title:"ysh",content:"This is a shell completely written in C which supports background / foreground jobs, semicolon list of commands, input / output redirection, piping, escaping within quotes(both double and single) and handles some signals like SIGINT(&amp;lt;C-c&amp;gt;) and SIGTSTP(&amp;lt;C-z&amp;gt;).FeaturesThe following shell builtins were implemented:      cd (supports absolute / relative paths)      pwd       echo       history (stored last 20 commands, accessible with the up arrow)      exit       pinfo (gives detailed info about any process given it&#39;s pid)      ls (yes, it was implemented again, supported &#39;-a&#39; and &#39;-l&#39; flags)      {un}setenv (allowed removal and creation of environment variables)      jobs (like ps)      kjob (sends a signal to a process)      fg / bg (moves a process to foreground or background)      overkill (stops all background processes)      ... (and some more)  Any external command was executed using the exec syscallThe following features were implemented:      semicolon(;) seperated list of commands can be passed, whitespace is ignored      Execution of system commands with or without arguments, in background or foreground      Notifying when and how the background process terminated      Input and output redirection, including appending to a file      Piping of commands      Handling SIGINT [C-c] and SIGTSTP [C-z] signals      Command recall using up arrow key      echo supports printing environment variables      Spaces are escaped within quotes. i.e., vim &quot;bad name.txt&quot; will work as expected  · · ·Image(s)                                Previous            Next  · · ·CodeThe code, along with instructions to build and use it can be found on github, at yoogottamk/ysh."}];document.addEventListener("DOMContentLoaded",(function(){let t=$("#searchBar");t.on("input propertychange",(function(){let n=t.val().toLowerCase(),o=$("div.projects"),s=$("#not-found");if(s.html(""),o.children().each((function(){$(this).css({display:"flex"})})),!n.length)return;let i=function(t){let n=[];return e.forEach(e=>{(function(e,t){return e.title.toLowerCase().includes(t)||e.content.toLowerCase().includes(t)||e.tags.join("|").toLowerCase().includes(t)})(e,t)&&n.push(e.id)}),n}(n);i.length||s.html("I haven't worked on this (yet)!"),o.children().each((function(){i.includes($(this).attr("id"))||$(this).css({display:"none"})}))}))}));