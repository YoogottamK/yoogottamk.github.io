const allBlogs=[{id:"/blog/managing-path",tags:["PATH","GNU/Linux"],title:"How I manage PATH",content:"&lt;p&gt;i use arch btw. Now that we have established that, lets see what the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable is and how it works.&lt;/p&gt;&lt;p&gt;According to &lt;a href=&quot;http://www.linfo.org/path_env_var.html&quot; target=&quot;_blank&quot;&gt;linfo&lt;/a&gt;,&lt;/p&gt;&lt;blockquote class=&quot;blockquote&quot;&gt;&lt;code&gt;PATH&lt;/code&gt; is an environmental variable in Linux and other Unix-like operating systems that tells the shell which directories to search for executable files (i.e., ready-to-run programs) in response to commands issued by a user. It increases both the convenience and the safety of such operating systems and is widely considered to be the single most important environmental variable.&lt;/blockquote&gt;&lt;div class=&quot;py-4&quot;&gt;&lt;/div&gt;&lt;p&gt;What that roughly means is that whenever you type in a command, the shell searches for that name in all the directories present in the &lt;code&gt;PATH&lt;/code&gt; variable. The &lt;code&gt;PATH&lt;/code&gt; variable looks something like this:&lt;/p&gt;&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;/usr/bin:/usr/sbin:/some/other/dir:...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;It is a list of directories separated by `&lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;`. The shell searches for the executable in each directory and ends the search as soon as it finds a file with the same name. &lt;em&gt;That also means that the order of directories in &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; matters.&lt;/em&gt;&lt;/p&gt;&lt;div class=&quot;text-center py-4&quot;&gt;· · ·&lt;/div&gt;&lt;h1 class=&quot;section-header&quot;&gt;The usual method&lt;/h1&gt;&lt;p&gt;The “standard” way of setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;, as seen in the top search result on &lt;a href=&quot;https://superuser.com/a/488175&quot; target=&quot;_blank&quot;&gt;superuser&lt;/a&gt; is this:&lt;/p&gt;&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/your/new/path/here&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Now, this works fine when you only need to add a few directories to &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;, and you always do that in a single file at the same place. However, the most common pattern I have seen is:&lt;/p&gt;&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/your/new/path/here...&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/another/new/path/here:/oh/and/a/second/too...&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/here/we/go/again...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This is bad. Updating the variable to remove a directory can be time consuming, and what if you want to give preference to a directory for an executable? You’ll have to change the order in which they are added to &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;. Doing it when your &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; updates are scattered all over the place doesn’t make it easy.&lt;/p&gt;&lt;p&gt;Even if you write all the directories in a single line, it get a little too long to handle sometimes:&lt;/p&gt;&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/your/new/path/here:/another/new/path/here:/oh/and/a/second/too:/here/we/go/again:...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;text-center py-4&quot;&gt;· · ·&lt;/div&gt;&lt;h1 class=&quot;section-header&quot;&gt;What I do&lt;/h1&gt;&lt;p&gt;I keep all my &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; updates in a single file and source that file in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.profile&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;That file looks like this:&lt;/p&gt;&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# directories which get prepended&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prepend_dirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/bin&quot;&lt;/span&gt;    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/projects/some-project&quot;&lt;/span&gt;    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/projects/another-one&quot;&lt;/span&gt;    ...&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# directories which get appended&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;append_dirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.some-dir&quot;&lt;/span&gt;    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.local/bin&quot;&lt;/span&gt;    &lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/android-studio/bin&quot;&lt;/span&gt;    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/flutter/bin&quot;&lt;/span&gt;    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.cargo/bin&quot;&lt;/span&gt;    ...&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# generate the strings&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prepend_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prepend_dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;append_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;append_dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# wth is this?!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prepend_path&lt;/span&gt;:+&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prepend_path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;append_path&lt;/span&gt;:+:&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;append_path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 class=&quot;section-header pt-4&quot;&gt;Explanation&lt;/h2&gt;&lt;p&gt;I maintain two arrays: one for prepending and one for appending.&lt;/p&gt;&lt;p&gt;I generate the string (&lt;code class=&quot;highlighter-rouge&quot;&gt;prepend_path, append_path&lt;/code&gt;) which gets added to &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;. This does not pollute your &lt;code class=&quot;highlighter-rouge&quot;&gt;IFS&lt;/code&gt;, since the whole command is ran in a subshell. Also, printing &lt;code class=&quot;highlighter-rouge&quot;&gt;${array[*]}&lt;/code&gt; expands to all elements separated by the first character of &lt;code class=&quot;highlighter-rouge&quot;&gt;IFS&lt;/code&gt;, which currently is `&lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;`.&lt;/p&gt;&lt;p&gt;The last line is special. It could simply have been&lt;/p&gt;&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prepend_path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$append_path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Although, a problem might arise when either &lt;code class=&quot;highlighter-rouge&quot;&gt;prepend_path&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;append_path&lt;/code&gt; is empty. The final &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; might end up looking like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;:/usr/bin:/usr/sbin:...:/home/user/bin:&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Solution: bash array parameter expansion&lt;/p&gt;&lt;blockquote class=&quot;blockquote&quot;&gt;&lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html&quot; target=&quot;_blank&quot;&gt;${parameter:+word}&lt;/a&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;If parameter is null or unset, nothing is substituted, otherwise the expansion of word is substituted.&lt;/blockquote&gt;&lt;p&gt;So, if either of them are empty, the corresponding `&lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;` won’t be added. Cool!&lt;/p&gt;&lt;p&gt;This way, you can easily add/remove directories from &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; and easily manage the order too.&lt;/p&gt;&lt;div class=&quot;text-center py-4&quot;&gt;· · ·&lt;/div&gt;&lt;h1 class=&quot;section-header&quot;&gt;&lt;/h1&gt;&lt;p&gt;This file, along with various other config files can be found in my &lt;a href=&quot;https://github.com/yoogottamk/dotfiles&quot; target=&quot;_blank&quot;&gt;dotfiles&lt;/a&gt; repo.&lt;/p&gt;&lt;p&gt;So, did you like it? Did I miss something? Did I do something in the wrong way? Please comment below and improve my knowledge!&lt;/p&gt;"},{id:"/blog/under-construction",tags:[],title:"Under Construction",content:"&lt;p&gt;I want to write many more articles. I will write more as soon as I get the time!&lt;/p&gt;&lt;p&gt;Thank you for your patience!&lt;/p&gt;"}];function isRelevant(t,s){return t.title.toLowerCase().includes(s)||t.content.toLowerCase().includes(s)||t.tags.join("|").toLowerCase().includes(s)}function getRelevantBlogs(t){let s=[];return allBlogs.forEach(l=>{isRelevant(l,t)&&s.push(l.id)}),s}function init(){let t=$("#searchBar");t.on("input propertychange",(function(){let s=t.val().toLowerCase(),l=$("div.posts"),o=$("#not-found");if(o.html(""),l.children().each((function(){$(this).css({display:"flex"})})),!s.length)return;let a=getRelevantBlogs(s);a.length||o.html("No such post has been written (yet)!"),l.children().each((function(){a.includes($(this).attr("id"))||$(this).css({display:"none"})}))}))}document.addEventListener("DOMContentLoaded",init);